ThreadPool.SetMaxThreads
	при малых значениях все потоки заняты и программа ждет их освобождения. 
		при малом колличестве потоков или малом времени жизни потока на скорость работы программы влияет не сильно.
		при большом колличестве потоков или большом времени жизни потока на скорость работы программы влияет сильно. примерное время выполнения = Math.Ceiling(iterations+1/maxThreads)*delay
	при больших значениях колличество используемых потоков зависит от времени жихни потока. почти не зависит от колличества итераций (когда minThreads<<iterations).
	на каждую итерацию создается новый поток, пока первый не освободится, затем скорость замедляется.
ThreadPool.SetMinThreads
	при значениях minThreads<<iterations колличество используемых потоков выбирается автоматически, затем растет по мере работы программы. 
	при значениях minThreads<iteratio колличчество используемых потоков быстро растет, пока живут первые потоки, далее колличество по надобности увеличивается по тем же алгоритмам 
	при значениях minThreads>iterationsns используются все потоки. примерное время выполнени = delay, для сложных операций вероятно время будет больше и будет зависить от колличества и мощности используемых потоков процесора
Вывод: 
	для большого колличества задач без сложных вычеслений но с долгим ожиданием стоит ставить значение minThreads и maxThreads большее, чем колличество таких задач
	для задач со сложным вычислением лучше позволить автоматически подобрать колличество потоков.
	ограничить колличесвто можно в том случае,когда скорость работы программы не так важна, но необходимо уменьшить использзование ресурсов системы